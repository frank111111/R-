dplyr
########################################################################################################
dplyr 相比 data.frame 确实好用得多
首先要把dat.frame 变成 tbl 形式
m= tbl_df("data.frame")                            变成tbl 形式以后,就可以用以下5大法则来做了

lut()                                            有待研究

#########################################################################################################
There are 5 basic verbs used in dplyr:
select()
filter()
arrange()
mutate()
summarise()
#########################################################################################################
SELECT
%%%%%%%
As an example, take the following call, that selects the variables var1 and var2 from the data frame df.

select(df, var1, var2)

You can also use : to select a range of variables and - to exclude some variables, 
similar to indexing a data.frame with square brackets. You can use both variable's names as well as integer indexes. 
This call selects the four first variables except for the second one of a data frame df:

select(df, 1:4, -2)                                 选取前四个coloum,但是不选第二个coloum

dplyr comes with a set of helper functions that can help you select groups of variables inside a select() call:

starts_with("X"): every name that starts with "X",
ends_with("X"): every name that ends with "X",
contains("X"): every name that contains "X",
matches("X"): every name that matches "X", where "X" can be a regular expression,
num_range("x", 1:5): the variables named x01, x02, x03, x04 and x05,
one_of(x): every name that appears in x, which should be a character vector.
Pay attention here: When you refer to columns directly inside select(), you don't use quotes. If you use the helper functions, you do use quotes.


%%%%%%%%%%%%%%%%%%%%%%%%%%
MUTATE
%%%%%%

mutate(df, z = x + y)                            在df这个database 里面,加入一个叫z的行,是由x+y 算出来的.
mutate(my_df, x = a + b, y = x + c)              mutate 也可以一次进行多次加入coloumn

paste 可以和mutate 一起使用：
c2=mutate(hflights,Date=paste(Year,Month,DayofMonth,sep="-"))


%%%%%%%%%%%%%%%%%%%%%%%%%%
FILTER
%%%%%%%
R comes with a set of logical operators that you can use inside filter():

x < y, TRUE if x is less than y
x <= y, TRUE if x is less than or equal to y
x == y, TRUE if x equals y
x != y, TRUE if x does not equal y
x >= y, TRUE if x is greater than or equal to y
x > y, TRUE if x is greater than y
x %in% c(a, b, c), TRUE if x is in the vector c(a, b, c)
!is.na(x)         x里面不是NA 的

The following example filters df such that only the observations for which a is positive, are kept:
filter(df, a > 0)


R also comes with a set of boolean operators that you can use to combine multiple logical tests into a single test. 
These include & (and), | (or), and ! (not). Instead of using the & operator, you can also pass several logical tests to filter(), 
separated by commas. The following two calls are completely equivalent:

filter(df, a > 0 & b > 0)
filter(df, a > 0, b > 0)
Next, is.na() will also come in handy. This example keeps the observations in df for which the variable x is not NA:

filter(df, !is.na(x))

%%%%%%%%%%%%%%%%%%%%%%%%%%
ARRANGE
%%%%%%

arrange() can be used to rearrange rows according to any type of data. If you pass 
arrange() a character variable, for example, R will rearrange the rows in alphabetical order 
according to values of the variable. If you pass a factor variable, R will rearrange the rows 
according to the order of the levels in your factor (running levels() on the variable reveals 
this order).

arrange(pp,desc(coloumn))   和mysql 一样, desc 是反向arrange 


%%%%%%%%%%%%%%%%%%%%%%%%%%
SUMMARIZE
%%%%%%

这个略显神秘
summarise(), the last of the 5 verbs, follows the same syntax as mutate(), 
but the resulting dataset consists of a single row instead of an entire new column in the case of mutate().
In contrast to the four other data manipulation functions, summarise() does not return an altered copy of the dataset it is summarizing; 
instead, it builds a new dataset that contains only the summarising statistics.

You can use any function you like in summarise() so long as the function can take a vector of data and return a single number. 
R contains many aggregating functions, as dplyr calls them:

min(x) - minimum value of vector x.
max(x) - maximum value of vector x.
mean(x) - mean value of vector x.
median(x) - median value of vector x.
quantile(x, p) - pth quantile of vector x.
sd(x) - standard deviation of vector x.
var(x) - variance of vector x.
IQR(x) - Inter Quartile Range (IQR) of vector x.
diff(range(x)) - total range of vector x.

例子：
summarise(temp1, 
          earliest = min(ArrDelay), 
          average = mean(ArrDelay), 
          latest = max(ArrDelay), 
          sd = sd(ArrDelay))


dplyr provides several helpful aggregate functions of its own, in addition to the ones that are already defined in R. These include:

first(x) - The first element of vector x.
last(x) - The last element of vector x.
nth(x, n) - The nth element of vector x.
n() - The number of rows in the data.frame or group of observations that summarise() describes.
n_distinct(x) - The number of unique values in vector x.

Next to these dplyr-specific functions, you can also turn a logical test into an aggregating function with sum() or mean(). 
A logical test returns a vector of TRUE's and FALSE's. When you apply sum() or mean() to such a vector, 
R coerces each TRUE to a 1 and each FALSE to a 0. 
sum() then represents the total number of observations that passed the test; 
mean() represents the proportion.

%%%%%%%%%%%%%%%%%%%%%%
PIPE OPERATOR
%%%%%%%%%

%>%
例子：

hflights %>%
  mutate(diff = TaxiOut - TaxiIn) %>%
  filter(!is.na(diff)) %>%
  summarise(avg = mean(diff))

这个例子是对hflights 这个database 一次进行了多种运算，这样更方便，快速，不用再一次一次call 这个 database了

#########################################################################################################
GROUP_BY 

group_by    这个指令，只能在 %>% 这个指令下使用，而且和summarise 一起使用或者mutate，因为group_by 只有一个input 就是 coloumn 的名字


这是代码:
hflights %>%
   group_by(UniqueCarrier) %>%
   summarise(p_canc = mean(Cancelled == 1) * 100, 
             avg_delay = mean(ArrDelay, na.rm = TRUE)) %>%
   arrange(avg_delay, p_canc)
   
这是Output:
   
   UniqueCarrier     p_canc  avg_delay
                <chr>      <dbl>      <dbl>
1          US_Airways  1.1848341 -1.0721154
2                Mesa 14.2857143 -0.8333333
3            American  1.5873016 -0.1161290
4             AirTran  0.8888889  0.7117117
5              Alaska  0.0000000  1.0625000
6            Frontier  0.0000000  4.0000000
7             JetBlue  4.1666667  4.0000000
8         Continental  0.7165377  6.0759329
9  Atlantic_Southeast  3.0567686  6.2927928
10             United  2.5773196  6.5925926
11              Delta  2.0746888  7.1440678
12          Southwest  1.6185477  7.5294903
13         ExpressJet  1.5290102  7.6131367
14     American_Eagle  1.8140590  7.8101852
15            SkyWest  1.6059296  9.1620429


GROUP_BY 这个function 还有很多需要学，没学会




